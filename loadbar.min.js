(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.Loadbar = factory());
}(this, (function () { 'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

// define requestAnimationFrame function
var rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
  window.setTimeout(callback, 1000 / 60);
};

// define cancelAnimationFrame function
var cAF = window.cancelAnimationFrame || window.webkitCancelAnimationFrame;

// check if is html element
var isHTMLElement = function isHTMLElement(el) {
  return el instanceof HTMLElement;
};

/**
 * map the object to element style
 * 
 * @param {HTMLElement} el 
 * @param {object} style 
 */
var mapStyleToElement = function mapStyleToElement(el, style) {
  for (var prop in style) {
    if (prop in el.style) {
      el.style[prop] = style[prop];
    }
  }
};

/**
 * remove all child node of element
 * 
 * @param {HTMLElement} el 
 */
var removeChild = function removeChild(el) {
  while (el.firstChild) {
    el.removeChild(el.firstChild);
  }
};

// easing animation function
var easing = function easing(t, b, c, d) {
  return c * t / d + b;
};

var body = document.getElementsByTagName('body')[0];

var Loadbar = function () {
  /**
   * Creates an instance of Loadbar.
   * @param {object} options custom config
   * @param {HTMLElement} el HTMLElement
   * 
   * @memberof Loadbar
   */
  function Loadbar(options, el) {
    classCallCheck(this, Loadbar);

    // set a new options if now options provided
    options = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' ? options : {};
    // define default options
    var defaultOptions = {
      height: '2px',
      backgroundColor: 'blue',
      easeFunction: easing,
      zIndex: 999
    };
    // set wrapper element if el arg is provided, support css selector
    this.el = typeof el === 'string' ? document.querySelector(el) : el;
    // handle custom element
    this.parentEl = !!this.el ? this.el.parentElement : body;
    // main options used in the library, merge default option & use options
    this.options = _extends({}, defaultOptions, options);
    // init animation status;
    this.isAnimating = false;
    // animation speed
    this.duration = 1.5;
    // animation id
    this.rAFId = null;
    // mark if this.el is removed from document
    this.elementDestroyed = false;

    var barWidth = void 0;
    Object.defineProperties(this, {
      // constant max width
      'maxWidth': { value: 100 },
      // limit bar width
      'barWidth': {
        get: function get$$1() {
          return barWidth;
        },
        set: function set$$1(value) {
          if (value < 0) value = 0;
          // set to 0 if width touch 100%
          if (value > 100) value = 100;
          barWidth = value;
        }
      }
    });

    // set barWidth property
    this.barWidth = 0;

    // define height property of the option
    var barHeight = void 0;
    Object.defineProperty(this.options, 'height', {
      get: function get$$1() {
        return barHeight;
      },
      set: function set$$1(value) {
        var numValue = parseInt(value);
        // limit max height & min height
        if (numValue > 5) value = 5 + 'px';
        if (numValue <= 0) value = 1 + 'px';
        barHeight = value;
      }
    });

    // set height property
    this.options.height = options.height || defaultOptions.height;

    this._init();
  }

  createClass(Loadbar, [{
    key: '_init',
    value: function _init() {
      this._refresh(true);
      // if wrapper supplied, use it, or create a new wrapper which fixed at the top of screen & add style
      isHTMLElement(this.el) ? this._cssElement() : this._createElement()._cssElement()._cssCustomElement();
      this._createChildElement()._cssChildElement()._renderBar();
    }
  }, {
    key: '_refresh',
    value: function _refresh(force) {
      if (this.elementDestroyed) {
        this._cssChildElement();
        this.parentEl.appendChild(this.el);
        this.elementDestroyed = false;
      }
      if (force) this.barWidth = 0;
      cAF(this.rAFId);
      this.isAnimating = true;
      this.lastTime = Date.now();
      return this;
    }
  }, {
    key: '_cssElement',
    value: function _cssElement() {
      this.el.style.height = this.options.height;
      this.el.style.backgroundColor = 'transparent';
      return this;
    }
  }, {
    key: '_cssCustomElement',
    value: function _cssCustomElement() {
      this.el.style.position = 'fixed';
      this.el.style.top = 0;
      this.el.style.left = 0;
      this.el.style.right = 0;
    }
  }, {
    key: '_createElement',
    value: function _createElement() {
      this.el = document.createElement('div');
      body.appendChild(this.el);
      return this;
    }
  }, {
    key: '_cssChildElement',
    value: function _cssChildElement() {
      mapStyleToElement(this.childEl, this.options);

      // overwrite the style 
      // first render width to 0
      this.childEl.style.height = '100%';
      this.childEl.style.opacity = '1';
      return this;
    }
  }, {
    key: '_createChildElement',
    value: function _createChildElement() {
      // remove all child element
      removeChild(this.el);
      this.childEl = document.createElement('div');
      this.el.appendChild(this.childEl);
      return this;
    }

    /**
     * render the child element width to new width
     * 
     * 
     * @memberof Loadbar
     */

  }, {
    key: '_renderBar',
    value: function _renderBar() {
      this.childEl.style.width = this.barWidth + '%';
      return this;
    }

    /**
     * grow child element width
     * 
     * @param {number} dt control speed
     * @param {number} num where bar goes
     * 
     * @memberof Loadbar
     */

  }, {
    key: '_update',
    value: function _update(dt, num) {
      this.barWidth = this.options.easeFunction(dt, this.barWidth, num - this.barWidth, this.duration);
      return this;
    }

    /**
     * main animate function of the library
     * used by almost every function
     * 
     * @param {number} num where the bar goes to
     * 
     * @memberof Loadbar
     */

  }, {
    key: '_grow',
    value: function _grow(num) {
      var now = Date.now();
      var dt = (now - this.lastTime) / 1000;

      this._update(dt, num)._renderBar();

      var dif = num - this.barWidth;
      // clear frame if touch max width
      if (dif === 0) return this.stop();
      // if grow to target, turn into loading status
      if (num !== 100 && dif <= 0.1 && dif > -0.1) return this.loading();
      // bind context, run animate again
      if (this.isAnimating) return this.rAFId = rAF(this._grow.bind(this, num));
    }

    /**
     * turn on animation status
     * 
     * @returns Loadbar
     * 
     * @memberof Loadbar
     */

  }, {
    key: '_begin',
    value: function _begin() {
      this._refresh().duration = 1.5;
      return this;
    }

    /**
     * means finish the main work ex: ajax done
     * basicly used by done() function
     * @returns Loadber
     * 
     * @memberof Loadbar
     */

  }, {
    key: '_finish',
    value: function _finish() {
      this._refresh().duration = 0.3;
      return this;
    }

    /**
     * fade out animation when done() function called
     * 
     * @param {HTMLElement} el html element
     * 
     * @memberof Loadbar
     */

  }, {
    key: '_fadeOut',
    value: function _fadeOut(el, callback) {
      el.style.opacity -= 0.1;
      if (el.style.opacity > 0) {
        rAF(this._fadeOut.bind(this, el, callback));
      } else {
        setTimeout(function () {
          callback();
        }, 300);
      }
    }
  }, {
    key: 'growTo',
    value: function growTo(num) {
      this._begin()._grow(num);
    }
  }, {
    key: 'start',
    value: function start() {
      this._refresh(true).growTo(10);
    }
  }, {
    key: 'loading',
    value: function loading() {
      this.pause().growTo(this.barWidth + 0.3 + Math.random() * 0.5);
    }
  }, {
    key: 'pause',
    value: function pause() {
      cAF(this.rAFId);
      this.isAnimating = false;
      return this;
    }
  }, {
    key: 'stop',
    value: function stop() {
      this.isAnimating && this.pause()._fadeOut(this.childEl, this.destroy.bind(this));
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      if (!this.elementDestroyed) {
        cAF(this.rAFId);
        this.isAnimating = false;
        this.barWidth = 0;
        this.parentEl.removeChild(this.el);
        this.elementDestroyed = true;
      }
    }
  }, {
    key: 'done',
    value: function done() {
      this._finish()._grow(100);
    }
  }]);
  return Loadbar;
}();

return Loadbar;

})));
